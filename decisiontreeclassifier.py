# -*- coding: utf-8 -*-
"""DecisionTreeClassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zAcl4HL39Odq3sVfwKlmt_lzMaPkMAfN
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report,accuracy_score,confusion_matrix
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

h = pd.read_csv("/content/Crop_recommendation.csv")

h

h.info()

encoder = LabelEncoder()
h["label"] = encoder.fit_transform(h["label"])

encoder.classes_

h.info()

h

h.isnull()

l=h
g=sns.pairplot(l,hue='label',markers="+")
plt.show()

X=h.drop("label",axis=1)
y=h["label"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

tree_clf = DecisionTreeClassifier(max_depth=7, random_state=42)
tree_clf.fit(X_train, y_train)
y_pred = tree_clf.predict(X_test)

cross_val_score(tree_clf, X_train, y_train, cv=3, scoring="accuracy")

accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
matrix = confusion_matrix(y_test, y_pred)

feature_importances = tree_clf.feature_importances_

plt.imshow(matrix, interpolation='nearest', cmap=plt.cm.Blues)
plt.title('Confusion matrix')
plt.colorbar()
plt.show()

tree_clf = DecisionTreeClassifier(random_state=42)

tree_clf.fit(X_train, y_train)

y_pred = tree_clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
matrix = confusion_matrix(y_test, y_pred)

print(f"Accuracy: {accuracy * 100:.2f}%")
print("\nClassification Report:\n", report)
print("\nConfusion Matrix:\n", matrix)

N = float(input("Enter the Nitrogen value: "))
P = float(input("Enter the Phosphorus value: "))
K = float(input("Enter the Potassium value: "))
temperature = float(input("Enter the temperature value: "))
humidity = float(input("Enter the humidity value: "))
ph = float(input("Enter the pH value: "))
rainfall = float(input("Enter the rainfall value: "))
user_input = pd.DataFrame([[N, P, K, temperature, humidity, ph, rainfall]],
                          columns=['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall'])
predicted_crop_label = tree_clf.predict(user_input)
print("Predicted Crop Label:", predicted_crop_label[0])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

tree_clf = DecisionTreeClassifier(max_depth=7, random_state=42)
tree_clf.fit(X_train, y_train)
y_pred = tree_clf.predict(X_test)

print(f"\nAccuracy = {tree_clf.score(X_test, y_test)*100}%")